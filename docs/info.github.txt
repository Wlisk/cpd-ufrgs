# signed commits with:
git commit -S -m "message"

# git e github para iniciantes
# lista de tutoriais curtos sobre como usar o git e como gerenciar arquivos no gituhub
https://www.youtube.com/playlist?list=PLlAbYrWSYTiPA2iEiQ2PF_A9j__C4hi0A

# Git e Github
# playlist sobre tÃ³picos de git e github
https://www.youtube.com/playlist?list=PLylCwvNCtoanYEIC4OBMO2hfB-ihCSv9Y

# Follow this tutorial to initialise a new github project from a local existing project
https://docs.github.com/en/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github


USING GIT:
project repository: git@github.com:Wlisk/cpd-ufrgs.git
branch: main

> git init -b <branch>
	initializes a folder as a git project
	*if first time and project not exists or not on github already
	
> git status
	get info about the status of the git project from the current folder (branch, commits, 
	files/folders added/not added)

> git add <file>
	add the file/folder to be proccessed
	we can use the wildcard (*) to proccess all files of the main folder or specific folder
	
> git commit
> git commit -m "message"
	proccess all the files that were added, and add then as new version into the branch 
	
> git restore <file>
	restore a file to the last commited version and discard changes 
	*notice that it works only for not added files

> git clone <repository>
	copies/clone the repository folder (all files included) into the current folder
	
> git remote add origin <repository>
	links a local project to a github project (cloud)
	*notice that clonig through SSH a repository removes the need of this command
	
> git remote -v
	verifies the status of the link between the local git project and the hosted 
	project in github
	
> git push -u origin <branch>
> git push
	uploads all commited modifications to github into the <branch>
	* notice that after the first time using [git push origin <branch>]
	* for the subsequent calls we can use only [git push]
	* but only for cloned git projects, otherwise we can configure to work 
	* as well with the command:
	> git config --add --bool push.autoSetupRemote true
	
> git branch
	list the branchs for the current git project
	the current branch is marked with the preffix (*)
	
> git branch <new-branch>
	creates a new branch with the name of <new-branch>
	
> git checkout <branch>
> git checkout -b <branch>
	exit from the context of the current branch and enter the <branch>
	if the branch does not exist using the [-b] option creates one
	*notice that <branch> must already exist
	*example: [git checkout AI] - exit from main and enter IA (context)
	*context means that now all the commands will update/change the current branch
	
> git merge <branch>
	merges/fuses/unite the current branch with <branch>
	*we can get the current branch using [git branch]
	
> git pull
	download all new changes in the github repository into the current git project






